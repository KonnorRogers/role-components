{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "exports/base-element.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseElement",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)"
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null"
            }
          ],
          "mixins": [
            {
              "name": "DefineableMixin",
              "package": "web-component-define"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseElement",
          "declaration": {
            "name": "BaseElement",
            "module": "exports/base-element.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "key",
          "declaration": {
            "name": "ctor",
            "module": "exports/base-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "RoleListbox",
          "declaration": {
            "name": "default",
            "module": "\"./listbox/listbox-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleOptionGroup",
          "declaration": {
            "name": "default",
            "module": "\"./option-group/option-group-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleOption",
          "declaration": {
            "name": "default",
            "module": "\"./option/option-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleToolbar",
          "declaration": {
            "name": "default",
            "module": "\"./toolbar/toolbar-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleTooltip",
          "declaration": {
            "name": "default",
            "module": "\"./tooltip/tooltip-register.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/anchored-region/anchored-region-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleAnchoredRegion",
            "module": "exports/anchored-region/anchored-region-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/anchored-region/anchored-region.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "AnchoredRegionMixin",
          "members": [
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top'\n          | 'top-start'\n          | 'top-end'\n          | 'bottom'\n          | 'bottom-start'\n          | 'bottom-end'\n          | 'right'\n          | 'right-start'\n          | 'right-end'\n          | 'left'\n          | 'left-start'\n          | 'left-end'"
              },
              "description": "The preferred placement of the popover. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "default": "\"top\""
            },
            {
              "kind": "field",
              "name": "currentPlacement",
              "type": {
                "text": "typeof this.placement | null"
              },
              "reflects": true,
              "default": "null"
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "Strategy"
              },
              "description": "Determines how the popover is positioned. Because you native \"popover\" API uses a fixed strategy, we use it as the default.",
              "default": "\"fixed\""
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset along the \"main axis\". Usually its equivalent to offsetY",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset along the \"cross axis\". Usually its equivalent to offsetX.",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "description": "Attaches an arrow to the popover. The arrow's size and color can be customized using the `--arrow-size` and\n`--background-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "default": "'anchor'"
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding between the arrow and the edges of the popover. If the popover has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "default": "10"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "description": "When set, placement of the popover will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "description": "If the preferred placement doesn't fit, popover will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popover should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "default": "'best-fit'"
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "description": "Moves the popover along the axis to keep it in view when clipped.",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "null | 'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popover to automatically resize itself to prevent it from overflowing.",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "null | 'width' | 'height' | 'both'"
              },
              "description": "Syncs the popover's width or height to that of the anchor element.",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "description": "When a gap exists between the anchor and the popover element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "default": "true"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "AnchoredRegionProperties"
        },
        {
          "kind": "class",
          "description": "",
          "name": "RoleAnchoredRegion",
          "cssProperties": [
            {
              "description": "The size of the arrow. Note that an arrow won't be shown unless the `arrow` attribute is used.",
              "name": "--arrow-size",
              "default": "6px"
            },
            {
              "description": "A read-only custom property that determines the amount of width the popover can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-width"
            },
            {
              "description": "A read-only custom property that determines the amount of height the popover can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-height"
            }
          ],
          "cssParts": [
            {
              "description": "The arrow's container. Avoid setting `top|bottom|left|right` properties, as these values are assigned dynamically as the popover moves. This is most useful for applying a background color to match the popover, and maybe a border or box shadow.",
              "name": "arrow"
            },
            {
              "description": "The popover's container. Useful for setting a background color, box shadow, etc.",
              "name": "popover"
            },
            {
              "description": "The hover bridge element. Only available when the `hover-bridge` option is enabled.",
              "name": "hover-bridge"
            }
          ],
          "slots": [
            {
              "description": "The popover's content.",
              "name": ""
            },
            {
              "description": "The element the popover will be anchored to. If the anchor lives outside of the popover, you can use the `anchor` attribute or property instead.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "popoverElement",
              "description": "A reference to the internal popover container. Useful for animating and styling the popover with JavaScript.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "arrowElement",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Forces the popover to recalculate and reposition itself."
            },
            {
              "kind": "field",
              "name": "updateHoverBridge"
            },
            {
              "kind": "field",
              "name": "anchor",
              "privacy": "public",
              "type": {
                "text": "null | Element | string | VirtualElement"
              },
              "description": "The element the popover will be anchored to. If the anchor lives outside of the popover, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popover, use the\n`anchor` slot instead.",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Activates the positioning logic and shows the popover. When this attribute is removed, the positioning logic is torn\ndown and the popover will be hidden.",
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top'\n          | 'top-start'\n          | 'top-end'\n          | 'bottom'\n          | 'bottom-start'\n          | 'bottom-end'\n          | 'right'\n          | 'right-start'\n          | 'right-end'\n          | 'left'\n          | 'left-start'\n          | 'left-end'"
              },
              "description": "The preferred placement of the popover. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "default": "\"top\"",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "currentPlacement",
              "type": {
                "text": "typeof this.placement | null"
              },
              "reflects": true,
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "Strategy"
              },
              "description": "Determines how the popover is positioned. Because you native \"popover\" API uses a fixed strategy, we use it as the default.",
              "default": "\"fixed\"",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset along the \"main axis\". Usually its equivalent to offsetY",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset along the \"cross axis\". Usually its equivalent to offsetX.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "description": "Attaches an arrow to the popover. The arrow's size and color can be customized using the `--arrow-size` and\n`--background-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "default": "false",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "default": "'anchor'",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding between the arrow and the edges of the popover. If the popover has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "default": "10",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "description": "When set, placement of the popover will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "description": "If the preferred placement doesn't fit, popover will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "default": "''",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popover should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "default": "'best-fit'",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "description": "Moves the popover along the axis to keep it in view when clipped.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "null | 'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popover to automatically resize itself to prevent it from overflowing.",
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "null | 'width' | 'height' | 'both'"
              },
              "description": "Syncs the popover's width or height to that of the anchor element.",
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "description": "When a gap exists between the anchor and the popover element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "role-reposition",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the popover is repositioned. This event can fire a lot, so avoid putting expensive operations in your listener or consider debouncing it."
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "description": "Activates the positioning logic and shows the popover. When this attribute is removed, the positioning logic is torn\ndown and the popover will be hidden.",
              "default": "false",
              "fieldName": "active"
            }
          ],
          "mixins": [
            {
              "name": "AnchoredRegionMixin",
              "module": "exports/anchored-region/anchored-region.js"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "summary": "Popup is a utility that lets you declaratively anchor \"popover\" containers to another element."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchoredRegionMixin",
          "declaration": {
            "name": "AnchoredRegionMixin",
            "module": "exports/anchored-region/anchored-region.js"
          }
        },
        {
          "kind": "js",
          "name": "AnchoredRegionProperties",
          "declaration": {
            "name": "AnchoredRegionProperties",
            "module": "exports/anchored-region/anchored-region.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleAnchoredRegion",
            "module": "exports/anchored-region/anchored-region.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/combobox/combobox-register.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "exports/combobox/combobox.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "exports/events/base-event.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseEvent",
          "superclass": {
            "name": "Event",
            "module": "exports/events/base-event.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseEvent",
          "declaration": {
            "name": "BaseEvent",
            "module": "exports/events/base-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/events/selected-event.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectedEvent",
          "members": [
            {
              "kind": "field",
              "name": "selectedElement",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "superclass": {
            "name": "BaseEvent",
            "module": "/exports/events/base-event.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectedEvent",
          "declaration": {
            "name": "SelectedEvent",
            "module": "exports/events/selected-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/listbox/listbox-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleListbox",
            "module": "exports/listbox/listbox-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/listbox/listbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A listbox following the W3C Listbox pattern.\n\n<https://www.w3.org/WAI/ARIA/apg/patterns/listbox/>\n\n\n`Single-select` listbox uses the \"select follows focus\" model.\n\n\n`Multi-select` listbox implements the keyboard recommendations here: <https://www.w3.org/WAI/ARIA/apg/patterns/listbox/#keyboard_interaction>\n\n  - <kbd>Shift + Down Arrow</kbd>: Moves focus to and toggles the selected state of the next option.\n  - <kbd>Shift + Up Arrow</kbd>: Moves focus to and toggles the selected state of the previous option.\n  - <kbd>Shift + Space</kbd>: Selects contiguous items from the most recently selected item to the focused item.\n  - <kbd>Control + Shift + Home</kbd>: Selects the focused option and all options up to the first option. Optionally, moves focus to the first option.\n  - <kbd>Control + Shift + End</kbd>: Selects the focused option and all options down to the last option.\n  - <kbd>Control + a</kbd>: Selects all\n\n  The currently hovered / focus `<role-option>` has `[aria-current=\"true\"]`\n\n  The currently selected `<role-option>` has `[aria-selected=\"true\"]`",
          "name": "RoleListbox",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-listbox\""
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "setFocus",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFocus",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "baseElement",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionHover",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentActiveOptionIndex",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Reset range when shiftKey goes up"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFromClosestSelectedToCurrent",
              "description": "Finds the closest selected option prior to the current option"
            },
            {
              "kind": "method",
              "name": "selectFromRangeStartToCurrent"
            },
            {
              "kind": "method",
              "name": "selectRange",
              "parameters": [
                {
                  "name": "{ from, to }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "Range"
                  }
                }
              ],
              "description": "Selects all options in a range and deselects all options not in the range"
            },
            {
              "kind": "method",
              "name": "selectFromStartToCurrent",
              "parameters": [
                {
                  "name": "startIndex",
                  "default": "0",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFromCurrentToEnd",
              "parameters": [
                {
                  "name": "endIndex",
                  "default": "this.options.length - 1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusElementFromSearchBuffer"
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "selectedElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect",
              "parameters": [
                {
                  "name": "selectedElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "description": "Mark every element with [aria-selected=\"true\"]"
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "description": "Mark every element with [aria-selected=\"false\"]"
            },
            {
              "kind": "method",
              "name": "toggleSelected",
              "parameters": [
                {
                  "name": "selectedElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusCurrent"
            },
            {
              "kind": "method",
              "name": "focusAt",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusNext"
            },
            {
              "kind": "method",
              "name": "focusPrevious"
            },
            {
              "kind": "method",
              "name": "focusFirst"
            },
            {
              "kind": "method",
              "name": "focusLast"
            },
            {
              "kind": "method",
              "name": "scrollOptionIntoView",
              "parameters": [
                {
                  "name": "selectedOption",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "parameters": [
                {
                  "name": "_evt",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocusOut"
            },
            {
              "kind": "method",
              "name": "isSelected",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateOptions"
            },
            {
              "kind": "method",
              "name": "assignRandomId",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Users dont always provide ids on elements, and we need to make sure the id isn't already taken."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "null | FormData | string"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "HTMLElement[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rangeStartOption",
              "privacy": "public",
              "type": {
                "text": "null | HTMLElement"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "wrapSelection",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "wrap-selection",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"presentation\""
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"off\"",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "multiple",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchBufferDelay",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "description": "Delay before the search buffer returns to an empty string",
              "default": "1000",
              "attribute": "search-buffer-delay",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "public",
              "type": {
                "text": "HTMLElement[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "currentActiveOption",
              "privacy": "public",
              "type": {
                "text": "null | HTMLElement"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributeFilter",
              "type": {
                "text": "array"
              },
              "default": "[\n      \"aria-current\",\n      \"selected\",\n      \"current\",\n      \"aria-selected\",\n      \"role\",\n    ]"
            },
            {
              "kind": "field",
              "name": "optionObserver",
              "description": "Monitors its DOM for new nodes and assigns them to `this.options`",
              "type": {
                "text": "MutationObserver"
              },
              "default": "new MutationObserver((mutations) => {\n      for (const { attributeName } of mutations) {\n        if (attributeName == null) continue;\n\n        if (this.attributeFilter.includes(attributeName)) {\n          this.debounce(() => this.updateOptions(), {\n            wait: 10,\n            key: this.updateOptions,\n          });\n        }\n\n        // We really care about the mutations, we just need to know if things are updating.\n        break;\n      }\n    })"
            },
            {
              "kind": "field",
              "name": "length",
              "privacy": "public",
              "attribute": "length"
            },
            {
              "kind": "field",
              "name": "_hasFocused",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_searchBuffer",
              "privacy": "public",
              "ignore": true,
              "type": {
                "text": "string"
              },
              "description": "Internal buffer for searching the listbox.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_searchBufferDebounce",
              "privacy": "public",
              "ignore": true,
              "type": {
                "text": "null | ReturnType<typeof setTimeout>"
              },
              "description": "timeoutId to clear the search buffer",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "\"off\"",
              "fieldName": "autocomplete"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "length",
              "fieldName": "length"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "wrap-selection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "wrapSelection"
            },
            {
              "name": "search-buffer-delay",
              "type": {
                "text": "number"
              },
              "description": "Delay before the search buffer returns to an empty string",
              "default": "1000",
              "fieldName": "searchBufferDelay"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabIndex"
            }
          ],
          "mixins": [
            {
              "name": "LitFormAssociatedMixin",
              "package": "form-associated-helpers/exports/mixins/lit-form-associated-mixin.js"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-listbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleListbox",
            "module": "exports/listbox/listbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option/option-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleOption",
            "module": "exports/option/option-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option/option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RoleOption",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-option\""
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "field",
              "name": "role",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"option\"",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "aria-selected is preferred for single-select listboxes / comboboxes",
              "default": "false",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "current",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "aria-current to show the currently focused option",
              "default": "false",
              "attribute": "current"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "null | string"
              },
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "defaultSelected",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "privacy": "public",
              "attribute": "aria-current",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "privacy": "public",
              "attribute": "aria-selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"option\"",
              "fieldName": "role"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "fieldName": "selected",
              "description": "aria-selected is preferred for single-select listboxes / comboboxes",
              "default": "false"
            },
            {
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "description": "aria-current to show the currently focused option",
              "default": "false",
              "fieldName": "current"
            },
            {
              "name": "aria-current",
              "fieldName": "ariaCurrent"
            },
            {
              "name": "aria-selected",
              "fieldName": "ariaSelected"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "tabIndex"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "null | string"
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleOption",
            "module": "exports/option/option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option-group/option-group-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleOptionGroup",
            "module": "exports/option-group/option-group-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option-group/option-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OptionGroup",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-option-group\""
            },
            {
              "kind": "field",
              "name": "role",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"group\"",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"group\"",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-option-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OptionGroup",
            "module": "exports/option-group/option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/styles/host-styles.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "visuallyHiddenStr",
          "default": "css`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`"
        },
        {
          "kind": "variable",
          "name": "hostStyles",
          "default": "css`\n  :host {\n    --role-background-hover-color: #005a9c;\n    --role-border-focus-color: #005a9c;\n    display: block;\n    box-sizing: border-box;\n  }\n\n  *,\n  *:after,\n  *:before {\n    box-sizing: border-box;\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n\n  [invisible] {\n    visibility: hidden !important;\n  }\n\n  .visually-hidden:not(:focus-within):not(:active) {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "visuallyHiddenStr",
          "declaration": {
            "name": "visuallyHiddenStr",
            "module": "exports/styles/host-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "hostStyles",
          "declaration": {
            "name": "hostStyles",
            "module": "exports/styles/host-styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/toolbar/toolbar-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleToolbar",
            "module": "exports/toolbar/toolbar-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/toolbar/toolbar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A toolbar following the W3C Toolbar pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/toolbar/",
          "name": "RoleToolbar",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "keydownHandlers",
              "return": {
                "type": {
                  "text": "Record<string, (event: Event) => void>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusNext",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusPrevious",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusFirst"
            },
            {
              "kind": "method",
              "name": "focusLast"
            },
            {
              "kind": "method",
              "name": "setTabIndex",
              "parameters": [
                {
                  "name": "{ focus = true }",
                  "default": "{}"
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentFocusElement",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateToolbarItems",
              "parameters": [
                {
                  "name": "evt",
                  "description": "triggered by a slot change event.",
                  "optional": true,
                  "type": {
                    "text": "undefined | null | Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_currentFocusIndex",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "_currentFocusIndex"
            },
            {
              "kind": "field",
              "name": "orientation",
              "privacy": "public",
              "type": {
                "text": "\"vertical\" | \"horizontal\""
              },
              "default": "\"horizontal\"",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_toolbarItems",
              "privacy": "public",
              "type": {
                "text": "Array<Element>"
              },
              "default": "[]",
              "attribute": "_toolbarItems"
            },
            {
              "kind": "field",
              "name": "ariaOrientation",
              "privacy": "public",
              "attribute": "ariaOrientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "\"vertical\" | \"horizontal\""
              },
              "default": "\"horizontal\"",
              "fieldName": "orientation"
            },
            {
              "name": "ariaOrientation",
              "fieldName": "ariaOrientation"
            },
            {
              "name": "_currentFocusIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "_currentFocusIndex"
            },
            {
              "name": "_toolbarItems",
              "type": {
                "text": "Array<Element>"
              },
              "default": "[]",
              "fieldName": "_toolbarItems"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-toolbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleToolbar",
            "module": "exports/toolbar/toolbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/tooltip/tooltip-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleTooltip",
            "module": "exports/tooltip/tooltip-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/tooltip/tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Due to accessibility reasons with aria-describedby, the tooltip must be the same\n  document / shadowRoot as the item being described by the tooltip.",
          "name": "RoleTooltip",
          "cssProperties": [
            {
              "name": "--background-color",
              "default": "#222"
            },
            {
              "name": "--arrow-size",
              "default": "8px"
            }
          ],
          "slots": [
            {
              "description": "default slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "default": "{\n    'role-anchored-region': RoleAnchoredRegion\n  }",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "baseName",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handlePopoverTriggerEvent",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "RolePopoverTriggerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleReposition"
            },
            {
              "kind": "method",
              "name": "handleToggle",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "ToggleEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "popoverIsOpen",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "anchoredRegion",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "findPopoverTriggerFromEvent",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "eventOrElement",
                  "type": {
                    "text": "Event|Element"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "parameters": [
                {
                  "name": "event",
                  "optional": true,
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "popover",
              "privacy": "public",
              "type": {
                "text": "\"manual\" | \"auto\""
              },
              "description": "A popover attribute can have values \"auto\" (default) or \"manual\". Popovers that have the auto state can be \"light dismissed\" by selecting outside the popover area, and generally only allow one popover to be displayed on-screen at a time. By contrast, manual popovers must always be explicitly hidden, but allow for use cases such as nested popovers in menus",
              "default": "\"auto\"",
              "attribute": "popover",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "The \"role\" attribute. Default is \"tooltip\" and generally shouldn't be overriden.",
              "default": "\"tooltip\"",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show the tooltip",
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "triggerSource",
              "privacy": "private",
              "type": {
                "text": "null | \"focus\" | \"hover\""
              },
              "default": "null",
              "attribute": "trigger-source",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "description": "Attaches an arrow to the popover. The arrow's size and color can be customized using the `--arrow-size` and\n`--background-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset along the \"main axis\". Usually its equivalent to offsetY",
              "default": "10",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "privacy": "public",
              "type": {
                "text": "Element | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top'\n          | 'top-start'\n          | 'top-end'\n          | 'bottom'\n          | 'bottom-start'\n          | 'bottom-end'\n          | 'right'\n          | 'right-start'\n          | 'right-end'\n          | 'left'\n          | 'left-start'\n          | 'left-end'"
              },
              "description": "The preferred placement of the popover. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "default": "\"top\"",
              "privacy": "public",
              "attribute": "placement",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "currentPlacement",
              "type": {
                "text": "typeof this.placement | null"
              },
              "reflects": true,
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "Strategy"
              },
              "description": "Determines how the popover is positioned. Because you native \"popover\" API uses a fixed strategy, we use it as the default.",
              "default": "\"fixed\"",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset along the \"cross axis\". Usually its equivalent to offsetX.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "default": "'anchor'",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding between the arrow and the edges of the popover. If the popover has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "default": "10",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "description": "When set, placement of the popover will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "description": "If the preferred placement doesn't fit, popover will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "default": "''",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popover should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "default": "'best-fit'",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "description": "Moves the popover along the axis to keep it in view when clipped.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "null | 'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popover to automatically resize itself to prevent it from overflowing.",
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "null | 'width' | 'height' | 'both'"
              },
              "description": "Syncs the popover's width or height to that of the anchor element.",
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "type": {
                "text": "undefined | Element | Element[]"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "description": "When a gap exists between the anchor and the popover element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "default": "true",
              "inheritedFrom": {
                "name": "AnchoredRegionMixin",
                "module": "exports/anchored-region/anchored-region.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "The \"role\" attribute. Default is \"tooltip\" and generally shouldn't be overriden.",
              "default": "\"tooltip\"",
              "fieldName": "role"
            },
            {
              "name": "placement",
              "fieldName": "placement"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show the tooltip",
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "popover",
              "type": {
                "text": "\"manual\" | \"auto\""
              },
              "description": "A popover attribute can have values \"auto\" (default) or \"manual\". Popovers that have the auto state can be \"light dismissed\" by selecting outside the popover area, and generally only allow one popover to be displayed on-screen at a time. By contrast, manual popovers must always be explicitly hidden, but allow for use cases such as nested popovers in menus",
              "default": "\"auto\"",
              "fieldName": "popover"
            },
            {
              "name": "trigger-source",
              "type": {
                "text": "null | \"focus\" | \"hover\""
              },
              "default": "null",
              "fieldName": "triggerSource"
            }
          ],
          "mixins": [
            {
              "name": "AnchoredRegionMixin",
              "module": "/exports/anchored-region/anchored-region.js"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleTooltip",
            "module": "exports/tooltip/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/clamp.js",
      "declarations": [
        {
          "kind": "function",
          "name": "clamp",
          "parameters": [
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "current",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "If current > max, return max\nIf current < min, return min",
          "return": {
            "type": {
              "text": "number"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "clamp",
          "declaration": {
            "name": "clamp",
            "module": "internal/clamp.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/debounce.js",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "callback",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "wait",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "internal/debounce.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/is-mac-os.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isMacOs",
          "description": "Detects if on a macOS device so we can properly bind things like metaKey\nhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform\n> But there is one case where, among the options you could use, navigator.platform may be the least-bad option: When you need to show users advice about whether the modifier key for keyboard shortcuts is the ⌘ command key (found on Apple systems) rather than the ⌃ control key (on non-Apple systems):"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isMacOs",
          "declaration": {
            "name": "isMacOs",
            "module": "internal/is-mac-os.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/string-map.js",
      "declarations": [
        {
          "kind": "function",
          "name": "stringMap",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "stringMap",
          "declaration": {
            "name": "stringMap",
            "module": "internal/string-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/uuid.js",
      "declarations": [
        {
          "kind": "function",
          "name": "uuidv4",
          "description": "uuid generator for attaching unique ids to attachments that need uploading.",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "uuidv4",
          "declaration": {
            "name": "uuidv4",
            "module": "internal/uuid.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/wrap.js",
      "declarations": [
        {
          "kind": "function",
          "name": "wrap",
          "parameters": [
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "current",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "If current > max, return min\nIf current < min, return max",
          "return": {
            "type": {
              "text": "number"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "wrap",
          "declaration": {
            "name": "wrap",
            "module": "internal/wrap.js"
          }
        }
      ]
    }
  ]
}
