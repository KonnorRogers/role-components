{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "exports/base-element.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseElement",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)"
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null"
            }
          ],
          "mixins": [
            {
              "name": "DefineableMixin",
              "package": "web-component-define"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseElement",
          "declaration": {
            "name": "BaseElement",
            "module": "exports/base-element.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "key",
          "declaration": {
            "name": "ctor",
            "module": "exports/base-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "RoleCombobox",
          "declaration": {
            "name": "default",
            "module": "\"./combobox/combobox-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleListbox",
          "declaration": {
            "name": "default",
            "module": "\"./listbox/listbox-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleOptionGroup",
          "declaration": {
            "name": "default",
            "module": "\"./option-group/option-group-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleOption",
          "declaration": {
            "name": "default",
            "module": "\"./option/option-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleToolbar",
          "declaration": {
            "name": "default",
            "module": "\"./toolbar/toolbar-register.js\""
          }
        },
        {
          "kind": "js",
          "name": "RoleTooltip",
          "declaration": {
            "name": "default",
            "module": "\"./tooltip/tooltip-register.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/combobox/combobox-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleCombobox",
            "module": "exports/combobox/combobox-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/combobox/combobox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A listbox following the W3C Listbox pattern.\n\n<https://www.w3.org/WAI/ARIA/apg/patterns/listbox/>\n\n\n`Single-select` listbox uses the \"select follows focus\" model.\n\n\n`Multi-select` listbox implements the keyboard recommendations here: <https://www.w3.org/WAI/ARIA/apg/patterns/listbox/#keyboard_interaction>\n\n  - <kbd>Shift + Down Arrow</kbd>: Moves focus to and toggles the selected state of the next option.\n  - <kbd>Shift + Up Arrow</kbd>: Moves focus to and toggles the selected state of the previous option.\n  - <kbd>Shift + Space</kbd>: Selects contiguous items from the most recently selected item to the focused item.\n  - <kbd>Control + Shift + Home</kbd>: Selects the focused option and all options up to the first option. Optionally, moves focus to the first option.\n  - <kbd>Control + Shift + End</kbd>: Selects the focused option and all options down to the last option.\n  - <kbd>Control + a</kbd>: Selects all\n\n  The currently hovered / focus `<role-option>` has `[aria-current=\"true\"]`\n\n  The currently selected `<role-option>` has `[aria-selected=\"true\"]`",
          "name": "RoleCombobox",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-combobox\""
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{...LitElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "args"
                }
              ],
              "type": {
                "text": "HTMLElement[\"focus\"]"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "splitValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMultipleEditableInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                },
                {
                  "name": "triggerElement",
                  "type": {
                    "text": "HTMLButtonElement | HTMLInputElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSingleEditableInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                },
                {
                  "name": "triggerElement",
                  "type": {
                    "text": "typeof this.triggerElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "optionElementToOptionObject",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "RoleOption"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "OptionObject"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleOptionFocus",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "{target: null | RoleOption}"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOutsideClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "assignRandomId",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "id",
                  "default": "uuidv4()"
                }
              ],
              "description": "Users dont always provide ids on elements, and we need to make sure the id isn't already taken."
            },
            {
              "kind": "field",
              "name": "listbox",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isEditable",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateListboxElement",
              "description": "Adds proper attributes to the slotted listbox element"
            },
            {
              "kind": "method",
              "name": "handleInputFocus",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateTriggerElement",
              "description": "Adds proper attributes to the slotted input element"
            },
            {
              "kind": "method",
              "name": "renderSelectedOptions"
            },
            {
              "kind": "field",
              "name": "shouldShowEmptyResults",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "field",
              "name": "isEditableMultipleCombobox",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setCurrent",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeCurrent",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findOptionElement",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "RoleOption | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionHover",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentOptionIndex",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "currentFocusableOptionIndex",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Reset range when shiftKey goes up"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFromClosestSelectedToCurrent",
              "description": "Finds the closest selected option prior to the current option"
            },
            {
              "kind": "method",
              "name": "selectFromRangeStartToCurrent"
            },
            {
              "kind": "method",
              "name": "selectRange",
              "parameters": [
                {
                  "name": "{ from, to }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "Range"
                  }
                }
              ],
              "description": "Selects all options in a range and deselects all options not in the range"
            },
            {
              "kind": "method",
              "name": "selectFromStartToCurrent",
              "parameters": [
                {
                  "name": "startIndex",
                  "default": "0",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFromCurrentToEnd",
              "parameters": [
                {
                  "name": "endIndex",
                  "default": "this.options.length - 1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "escapeRegexChars",
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Escape characters for regex matching."
            },
            {
              "kind": "method",
              "name": "stringToRegex",
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusElementFromSearchBuffer"
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "description": "Mark every element with [aria-selected=\"true\"]"
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "parameters": [
                {
                  "name": "updateOptions",
                  "default": "true"
                }
              ],
              "description": "Mark every element with [aria-selected=\"false\"]"
            },
            {
              "kind": "method",
              "name": "toggleSelected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusCurrent"
            },
            {
              "kind": "field",
              "name": "focusableOptions",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focusAt",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusNext"
            },
            {
              "kind": "method",
              "name": "focusPrevious"
            },
            {
              "kind": "method",
              "name": "focusFirst"
            },
            {
              "kind": "method",
              "name": "focusLast"
            },
            {
              "kind": "method",
              "name": "scrollOptionIntoView",
              "parameters": [
                {
                  "name": "selectedOption",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "scrollOptionElementIntoView",
              "parameters": [
                {
                  "name": "optionElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "OptionObject"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectableOptions",
              "return": {
                "type": {
                  "text": "NodeListOf<HTMLOptionElement | RoleOption>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "completionSelected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateOptions"
            },
            {
              "kind": "field",
              "name": "multipleFormDataAndStringValue",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateMultipleValue",
              "parameters": [
                {
                  "name": "force",
                  "default": "false",
                  "description": "whether or not to force update a new value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Updates formData / combobox.value"
            },
            {
              "kind": "method",
              "name": "updateTriggerElementTextContentAndValue",
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "triggerElement",
              "type": {
                "text": "HTMLButtonElement | HTMLInputElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "listboxId"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "privacy": "public",
              "type": {
                "text": "'' | \"off\" | \"inline\" | \"list\" | \"both\""
              },
              "description": "Any autocompletes of type `\"off\"`, `\"inline\"`, `\"list\"`, or `\"both\"` will automatically make the triggerElement editable.",
              "default": "''",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "editable",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "If true, the `<input>` element provided is not treated as readonly, and rather as an editable input. This can be omitted\n if you use any of the possible `autocomplete` attributes. Do not use this to check if the combobox is editable.\n instead, use `this.isEditable` to check if the triggerElement is editable.",
              "default": "false",
              "attribute": "editable"
            },
            {
              "kind": "field",
              "name": "delimiter",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Used for multiple select comboboxes that use `value-type=\"string\"`. The default is a comma.",
              "default": "','",
              "attribute": "delimiter"
            },
            {
              "kind": "field",
              "name": "spacer",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "description": "Used for multiple select comboboxes that use `value-type=\"string\"`. The default is a space.",
              "default": "\" \"",
              "attribute": "spacer"
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "privacy": "public",
              "type": {
                "text": "OptionObject[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "public",
              "type": {
                "text": "OptionObject[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "currentOption",
              "privacy": "public",
              "type": {
                "text": "null | OptionObject"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "expanded",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded"
            },
            {
              "kind": "field",
              "name": "multiple",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Whether to allow multiple selections.",
              "default": "false",
              "attribute": "multiple"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "null | FormData | string"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "__rangeStartOption",
              "privacy": "public",
              "type": {
                "text": "null | OptionObject"
              },
              "description": "Used internally for range selections",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "wrapSelection",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "wrap-selection"
            },
            {
              "kind": "field",
              "name": "filterResults",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to filter results based on what is typed into the combobox.",
              "default": "false",
              "attribute": "filter-results"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"presentation\""
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "showEmptyResults",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "If true, or `show-empty-results` attribute is present, it will show the \"no-results-found\" slot.",
              "default": "false",
              "attribute": "show-empty-results"
            },
            {
              "kind": "field",
              "name": "searchBufferDelay",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "description": "Delay before the search buffer returns to an empty string",
              "default": "600",
              "attribute": "search-buffer-delay",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valueType",
              "privacy": "public",
              "type": {
                "text": "\"formdata\" | \"string\""
              },
              "description": "Used for multiple selects. You can either have a string, or submit as multiple parameters in FormData\n  like a native `<select>`. The default is a \"string\"",
              "default": "\"string\"",
              "attribute": "value-type"
            },
            {
              "kind": "field",
              "name": "attributeFilter",
              "type": {
                "text": "array"
              },
              "default": "[\n      \"aria-current\",\n      \"selected\",\n      \"current\",\n      \"aria-selected\",\n      \"role\",\n    ]"
            },
            {
              "kind": "field",
              "name": "optionObserver",
              "description": "Monitors its DOM for new nodes and assigns them to `this.options`",
              "type": {
                "text": "MutationObserver"
              },
              "default": "new MutationObserver((mutations) => {\n      for (const _mutation of mutations) {\n        this.debounce(() => { this.updateOptions(); }, {\n          wait: 10,\n          key: this.updateOptions,\n        });\n\n\n        // We really don't care about the mutations, we just need to know if things are updating.\n        break;\n      }\n    })"
            },
            {
              "kind": "field",
              "name": "",
              "privacy": "public",
              "attribute": ""
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_hasFocused",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_searchBuffer",
              "privacy": "public",
              "ignore": true,
              "type": {
                "text": "string"
              },
              "description": "Internal buffer for searching the listbox.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_searchBufferDebounce",
              "privacy": "public",
              "ignore": true,
              "type": {
                "text": "null | ReturnType<typeof setTimeout>"
              },
              "description": "timeoutId to clear the search buffer",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "input",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "",
              "fieldName": ""
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "'' | \"off\" | \"inline\" | \"list\" | \"both\""
              },
              "description": "Any autocompletes of type `\"off\"`, `\"inline\"`, `\"list\"`, or `\"both\"` will automatically make the triggerElement editable.",
              "default": "''",
              "fieldName": "autocomplete"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "description": "Whether to allow multiple selections.",
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "value",
              "fieldName": "defaultValue"
            },
            {
              "name": "wrap-selection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "wrapSelection"
            },
            {
              "name": "editable",
              "type": {
                "text": "boolean"
              },
              "description": "If true, the `<input>` element provided is not treated as readonly, and rather as an editable input. This can be omitted\n if you use any of the possible `autocomplete` attributes. Do not use this to check if the combobox is editable.\n instead, use `this.isEditable` to check if the triggerElement is editable.",
              "default": "false",
              "fieldName": "editable"
            },
            {
              "name": "filter-results",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to filter results based on what is typed into the combobox.",
              "default": "false",
              "fieldName": "filterResults"
            },
            {
              "name": "search-buffer-delay",
              "type": {
                "text": "number"
              },
              "description": "Delay before the search buffer returns to an empty string",
              "default": "600",
              "fieldName": "searchBufferDelay"
            },
            {
              "name": "value-type",
              "type": {
                "text": "\"formdata\" | \"string\""
              },
              "description": "Used for multiple selects. You can either have a string, or submit as multiple parameters in FormData\n  like a native `<select>`. The default is a \"string\"",
              "default": "\"string\"",
              "fieldName": "valueType"
            },
            {
              "name": "delimiter",
              "type": {
                "text": "string"
              },
              "description": "Used for multiple select comboboxes that use `value-type=\"string\"`. The default is a comma.",
              "default": "','",
              "fieldName": "delimiter"
            },
            {
              "name": "spacer",
              "type": {
                "text": "string"
              },
              "description": "Used for multiple select comboboxes that use `value-type=\"string\"`. The default is a space.",
              "default": "\" \"",
              "fieldName": "spacer"
            },
            {
              "name": "show-empty-results",
              "type": {
                "text": "boolean"
              },
              "description": "If true, or `show-empty-results` attribute is present, it will show the \"no-results-found\" slot.",
              "default": "false",
              "fieldName": "showEmptyResults"
            }
          ],
          "mixins": [
            {
              "name": "LitFormAssociatedMixin",
              "package": "form-associated-helpers/exports/mixins/lit-form-associated-mixin.js"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-combobox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleCombobox",
            "module": "exports/combobox/combobox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/events/base-event.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseEvent",
          "superclass": {
            "name": "Event",
            "module": "exports/events/base-event.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseEvent",
          "declaration": {
            "name": "BaseEvent",
            "module": "exports/events/base-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/events/selected-event.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectedEvent",
          "members": [
            {
              "kind": "field",
              "name": "selectedElement",
              "type": {
                "text": "null | RoleOption"
              }
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "null | OptionObject"
              }
            }
          ],
          "superclass": {
            "name": "BaseEvent",
            "module": "/exports/events/base-event.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectedEvent",
          "declaration": {
            "name": "SelectedEvent",
            "module": "exports/events/selected-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/listbox/listbox-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleListbox",
            "module": "exports/listbox/listbox-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/listbox/listbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A listbox following the APG Listbox pattern.\n\n<https://www.w3.org/WAI/ARIA/apg/patterns/listbox/>\n\n\n`Single-select` listbox uses the \"select follows focus\" model.\n\n\n`Multi-select` listbox implements the keyboard recommendations here: <https://www.w3.org/WAI/ARIA/apg/patterns/listbox/#keyboard_interaction>\n\n  - <kbd>Shift + Down Arrow</kbd>: Moves focus to and toggles the selected state of the next option.\n  - <kbd>Shift + Up Arrow</kbd>: Moves focus to and toggles the selected state of the previous option.\n  - <kbd>Shift + Space</kbd>: Selects contiguous items from the most recently selected item to the focused item.\n  - <kbd>Control + Shift + Home</kbd>: Selects the focused option and all options up to the first option. Optionally, moves focus to the first option.\n  - <kbd>Control + Shift + End</kbd>: Selects the focused option and all options down to the last option.\n  - <kbd>Control + a</kbd>: Selects all\n\n  The currently hovered / focus `<role-option>` has `[aria-current=\"true\"]`\n\n  The currently selected `<role-option>` has `[aria-selected=\"true\"]`",
          "name": "RoleListbox",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-listbox\""
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "setFocus",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFocus",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "baseElement",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionHover",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentOptionIndex",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Reset range when shiftKey goes up"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFromClosestSelectedToCurrent",
              "description": "Finds the closest selected option prior to the current option"
            },
            {
              "kind": "method",
              "name": "selectFromRangeStartToCurrent"
            },
            {
              "kind": "method",
              "name": "selectRange",
              "parameters": [
                {
                  "name": "{ from, to }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "Range"
                  }
                }
              ],
              "description": "Selects all options in a range and deselects all options not in the range"
            },
            {
              "kind": "method",
              "name": "selectFromStartToCurrent",
              "parameters": [
                {
                  "name": "startIndex",
                  "default": "0",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFromCurrentToEnd",
              "parameters": [
                {
                  "name": "endIndex",
                  "default": "this.options.length - 1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusElementFromSearchBuffer"
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "description": "Mark every element with [aria-selected=\"true\"]"
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "description": "Mark every element with [aria-selected=\"false\"]"
            },
            {
              "kind": "method",
              "name": "toggleSelected",
              "parameters": [
                {
                  "name": "selectedElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusCurrent"
            },
            {
              "kind": "method",
              "name": "focusAt",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusNext"
            },
            {
              "kind": "method",
              "name": "focusPrevious"
            },
            {
              "kind": "method",
              "name": "focusFirst"
            },
            {
              "kind": "method",
              "name": "focusLast"
            },
            {
              "kind": "method",
              "name": "scrollOptionIntoView",
              "parameters": [
                {
                  "name": "selectedOption",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "parameters": [
                {
                  "name": "_evt",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isSelected",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateOptions"
            },
            {
              "kind": "method",
              "name": "assignRandomId",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Users dont always provide ids on elements, and we need to make sure the id isn't already taken."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "null | FormData | string"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "HTMLElement[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rangeStartOption",
              "privacy": "public",
              "type": {
                "text": "null | HTMLElement"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "wrapSelection",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "wrap-selection",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"presentation\""
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"off\"",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "multiple",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchBufferDelay",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "description": "Delay before the search buffer returns to an empty string",
              "default": "1000",
              "attribute": "search-buffer-delay",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "public",
              "type": {
                "text": "HTMLElement[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "currentOption",
              "privacy": "public",
              "type": {
                "text": "null | HTMLElement"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributeFilter",
              "type": {
                "text": "array"
              },
              "default": "[\n      \"aria-current\",\n      \"selected\",\n      \"current\",\n      \"aria-selected\",\n      \"role\",\n    ]"
            },
            {
              "kind": "field",
              "name": "optionObserver",
              "description": "Monitors its DOM for new nodes and assigns them to `this.options`",
              "type": {
                "text": "MutationObserver"
              },
              "default": "new MutationObserver((mutations) => {\n      for (const { attributeName } of mutations) {\n        if (attributeName == null) continue;\n\n        if (this.attributeFilter.includes(attributeName)) {\n          this.debounce(() => this.updateOptions(), {\n            wait: 10,\n            key: this.updateOptions,\n          });\n        }\n\n        // We really care about the mutations, we just need to know if things are updating.\n        break;\n      }\n    })"
            },
            {
              "kind": "field",
              "name": "",
              "privacy": "public",
              "attribute": ""
            },
            {
              "kind": "field",
              "name": "length",
              "privacy": "public",
              "attribute": "length"
            },
            {
              "kind": "field",
              "name": "_hasFocused",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_searchBuffer",
              "privacy": "public",
              "ignore": true,
              "type": {
                "text": "string"
              },
              "description": "Internal buffer for searching the listbox.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_searchBufferDebounce",
              "privacy": "public",
              "ignore": true,
              "type": {
                "text": "null | ReturnType<typeof setTimeout>"
              },
              "description": "timeoutId to clear the search buffer",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "",
              "fieldName": ""
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "\"off\"",
              "fieldName": "autocomplete"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "length",
              "fieldName": "length"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "wrap-selection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "wrapSelection"
            },
            {
              "name": "search-buffer-delay",
              "type": {
                "text": "number"
              },
              "description": "Delay before the search buffer returns to an empty string",
              "default": "1000",
              "fieldName": "searchBufferDelay"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabIndex"
            }
          ],
          "mixins": [
            {
              "name": "LitFormAssociatedMixin",
              "package": "form-associated-helpers/exports/mixins/lit-form-associated-mixin.js"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-listbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleListbox",
            "module": "exports/listbox/listbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option/option-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleOption",
            "module": "exports/option/option-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option/option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RoleOption",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-option\""
            },
            {
              "kind": "field",
              "name": "validators",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "description": "Sends a bubbling focus event to be usable by the combobox."
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "description": "Sends a bubbling focus event to be usable by the combobox."
            },
            {
              "kind": "method",
              "name": "simulateLinkClick"
            },
            {
              "kind": "method",
              "name": "renderBase",
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "ReturnType<html>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "privacy": "public",
              "type": {
                "text": "null | string"
              },
              "default": "null",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "linkAttributes",
              "type": {
                "text": "array"
              },
              "default": "[\n      \"download\",\n      \"href\",\n      \"hreflang\",\n      \"ping\",\n      \"referrerpolicy\",\n      \"rel\",\n      \"target\",\n      \"type\",\n    ]"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"presentation\""
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "aria-selected is preferred for single-select listboxes / comboboxes",
              "default": "false",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "defaultSelected",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "The selection state when the form is reset",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "current",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "description": "aria-current to show the currently focused option",
              "default": "false",
              "attribute": "current"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "null | string"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "",
              "privacy": "public",
              "attribute": ""
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "privacy": "public",
              "attribute": "aria-current",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "privacy": "public",
              "attribute": "aria-selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "role-focus",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "role-blur",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "",
              "fieldName": ""
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "aria-selected is preferred for single-select listboxes / comboboxes",
              "fieldName": "selected",
              "default": "false"
            },
            {
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "description": "aria-current to show the currently focused option",
              "default": "false",
              "fieldName": "current"
            },
            {
              "name": "aria-current",
              "fieldName": "ariaCurrent"
            },
            {
              "name": "aria-selected",
              "fieldName": "ariaSelected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "tabIndex"
            },
            {
              "name": "href",
              "type": {
                "text": "null | string"
              },
              "default": "null",
              "fieldName": "href"
            }
          ],
          "mixins": [
            {
              "name": "LitFormAssociatedMixin",
              "package": "form-associated-helpers/exports/mixins/lit-form-associated-mixin.js"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleOption",
            "module": "exports/option/option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option-group/option-group-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleOptionGroup",
            "module": "exports/option-group/option-group-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/option-group/option-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OptionGroup",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"role-option-group\""
            },
            {
              "kind": "field",
              "name": "role",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"group\"",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"group\"",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-option-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OptionGroup",
            "module": "exports/option-group/option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/styles/host-styles.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "hostStyles",
          "default": "css`\n  :host {\n    --role-background-hover-color: #005a9c;\n    --role-border-focus-color: #005a9c;\n    display: block;\n  }\n\n  *,\n  *:after,\n  *:before {\n    box-sizing: border-box;\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n\n  [invisible] {\n    visibility: hidden !important;\n  }\n\n  .visually-hidden:not(:focus-within):not(:active) {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hostStyles",
          "declaration": {
            "name": "hostStyles",
            "module": "exports/styles/host-styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/toolbar/toolbar-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleToolbar",
            "module": "exports/toolbar/toolbar-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/toolbar/toolbar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A toolbar following the W3C Toolbar pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/toolbar/",
          "name": "RoleToolbar",
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "keydownHandlers",
              "return": {
                "type": {
                  "text": "Record<string, (event: Event) => void>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusNext",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusPrevious",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusFirst"
            },
            {
              "kind": "method",
              "name": "focusLast"
            },
            {
              "kind": "method",
              "name": "setTabIndex",
              "parameters": [
                {
                  "name": "{ focus = true }",
                  "default": "{}"
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentFocusElement",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateToolbarItems",
              "parameters": [
                {
                  "name": "evt",
                  "description": "triggered by a slot change event.",
                  "optional": true,
                  "type": {
                    "text": "undefined | null | Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_currentFocusIndex",
              "privacy": "public",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "_currentFocusIndex"
            },
            {
              "kind": "field",
              "name": "orientation",
              "privacy": "public",
              "type": {
                "text": "\"vertical\" | \"horizontal\""
              },
              "default": "\"horizontal\"",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_toolbarItems",
              "privacy": "public",
              "type": {
                "text": "Array<Element>"
              },
              "default": "[]",
              "attribute": "_toolbarItems"
            },
            {
              "kind": "field",
              "name": "ariaOrientation",
              "privacy": "public",
              "attribute": "ariaOrientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "\"vertical\" | \"horizontal\""
              },
              "default": "\"horizontal\"",
              "fieldName": "orientation"
            },
            {
              "name": "ariaOrientation",
              "fieldName": "ariaOrientation"
            },
            {
              "name": "_currentFocusIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "_currentFocusIndex"
            },
            {
              "name": "_toolbarItems",
              "type": {
                "text": "Array<Element>"
              },
              "default": "[]",
              "fieldName": "_toolbarItems"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-toolbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleToolbar",
            "module": "exports/toolbar/toolbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/tooltip/tooltip-register.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleTooltip",
            "module": "exports/tooltip/tooltip-register.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "exports/tooltip/tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Due to accessibility reasons with aria-describedby, the tooltip must be the same\n  document / shadowRoot as the item being described by the tooltip.",
          "name": "RoleTooltip",
          "cssProperties": [
            {
              "name": "--background-color",
              "default": "#222"
            },
            {
              "name": "--arrow-size",
              "default": "8px"
            }
          ],
          "slots": [
            {
              "description": "default slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "baseName",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateAnchors"
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rootElement",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "attribute": "rootElement"
            },
            {
              "kind": "method",
              "name": "attachListeners",
              "description": "Used for re-initialized event listeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "removeListeners",
              "description": "Used for cleaning up",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "arrow",
              "return": {
                "type": {
                  "text": "HTMLElement | undefined | null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "show",
              "parameters": [
                {
                  "name": "eventOrElement",
                  "type": {
                    "text": "Event|Element"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "hide",
              "parameters": [
                {
                  "name": "_event",
                  "optional": true,
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "keyboardHide",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event | KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "computeTooltipPosition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "base",
              "return": {
                "type": {
                  "text": "HTMLElement | null | undefined"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tooltipAnchors",
              "privacy": "public",
              "type": {
                "text": "Element[]"
              },
              "default": "[]",
              "attribute": "tooltipAnchors"
            },
            {
              "kind": "field",
              "name": "_rootElement",
              "type": {
                "text": "ShadowRoot | Document | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "role",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "default": "\"tooltip\"",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inert",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "inert",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "privacy": "public",
              "type": {
                "text": "Placement"
              },
              "default": "\"top\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "listeners",
              "type": {
                "text": "Array<[keyof GlobalEventHandlersEventMap, (evt: Event | KeyboardEvent) => void]>"
              },
              "default": "[\n      [\"pointerenter\", show],\n      [\"pointerleave\", hide],\n      [\"pointercancel\", hide],\n      [\"pointerup\", hide],\n      [\"focusin\", show],\n      [\"focusout\", hide],\n      [\"keydown\", keyboardHide],\n    ]"
            },
            {
              "kind": "field",
              "name": "id",
              "privacy": "public",
              "attribute": "id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dependencies",
              "static": true,
              "type": {
                "text": "Record<string, typeof HTMLElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "method",
              "name": "debounce",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(...args: any[]) => any"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{ key: any, wait: number }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ReturnType<typeof setTimeout>"
                }
              },
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "eventHandler",
              "type": {
                "text": "EventHandler<this>"
              },
              "default": "new EventHandler(this)",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__debounceMap__",
              "type": {
                "text": "null | Map<any, ReturnType<typeof setTimeout>>"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "exports/base-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "id",
              "fieldName": "id"
            },
            {
              "name": "tooltipAnchors",
              "type": {
                "text": "Element[]"
              },
              "default": "[]",
              "fieldName": "tooltipAnchors"
            },
            {
              "name": "rootElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "fieldName": "rootElement"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"tooltip\"",
              "fieldName": "role"
            },
            {
              "name": "inert",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "inert"
            },
            {
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "\"top\"",
              "fieldName": "placement"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/exports/base-element.js"
          },
          "tagName": "role-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RoleTooltip",
            "module": "exports/tooltip/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/clamp.js",
      "declarations": [
        {
          "kind": "function",
          "name": "clamp",
          "parameters": [
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "current",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "If current > max, return max\nIf current < min, return min",
          "return": {
            "type": {
              "text": "number"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "clamp",
          "declaration": {
            "name": "clamp",
            "module": "internal/clamp.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/debounce.js",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "callback",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "wait",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "internal/debounce.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/is-mac-os.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isMacOs",
          "description": "Detects if on a macOS device so we can properly bind things like metaKey\nhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform\n> But there is one case where, among the options you could use, navigator.platform may be the least-bad option: When you need to show users advice about whether the modifier key for keyboard shortcuts is the ⌘ command key (found on Apple systems) rather than the ⌃ control key (on non-Apple systems):"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isMacOs",
          "declaration": {
            "name": "isMacOs",
            "module": "internal/is-mac-os.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/string-map.js",
      "declarations": [
        {
          "kind": "function",
          "name": "stringMap",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "stringMap",
          "declaration": {
            "name": "stringMap",
            "module": "internal/string-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/uuid.js",
      "declarations": [
        {
          "kind": "function",
          "name": "uuidv4",
          "description": "uuid generator for attaching unique ids to attachments that need uploading.",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "uuidv4",
          "declaration": {
            "name": "uuidv4",
            "module": "internal/uuid.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "internal/wrap.js",
      "declarations": [
        {
          "kind": "function",
          "name": "wrap",
          "parameters": [
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "current",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "If current > max, return min\nIf current < min, return max",
          "return": {
            "type": {
              "text": "number"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "wrap",
          "declaration": {
            "name": "wrap",
            "module": "internal/wrap.js"
          }
        }
      ]
    }
  ]
}
